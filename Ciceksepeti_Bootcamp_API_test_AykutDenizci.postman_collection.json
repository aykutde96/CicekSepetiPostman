{
	"info": {
		"_postman_id": "a5c1cd2a-6dd7-42b7-a53b-273cfff8db7f",
		"name": "Ciceksepeti Bootcamp API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "cityName_ankara",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = JSON.parse(responseBody);\r",
							"\r",
							"function checkRatingAverage(num)\r",
							"{ if (num<=0.5 && num >= 0){\r",
							"    return 0;\r",
							"} if(num<1 && num >= 0.5){\r",
							"    return 0.5;\r",
							"}if(num<1.5 && num >= 1){\r",
							"    return 1;\r",
							"}if(num<2 && num >= 1.5){\r",
							"    return 1.5;\r",
							"}if(num<2.5 && num >= 2){\r",
							"    return 2;\r",
							"}if(num<3 && num >= 2.5){\r",
							"    return 2.5;\r",
							"}if(num<3.5 && num >= 3){\r",
							"    return 3;\r",
							"}if(num<4 && num >= 3.5){\r",
							"    return 3.5;\r",
							"}if(num<4.5 && num >= 4){\r",
							"    return 4;\r",
							"}if(num<5 && num >= 4.5){\r",
							"    return 4.5;\r",
							"}if(5<=num){\r",
							"    return 5;\r",
							"}else{\r",
							"    console.log(\"Ratingler Eşleşmedi!\")\r",
							"}}\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"   var reviewcount = responseJson.reviewDtos.length;\r",
							"for (let i = 0; i < reviewcount; i++) {\r",
							"    pm.expect(responseJson.reviewDtos[i].name).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.reviewDtos[i].comment).to.be.a(\"string\");;\r",
							"    pm.expect(responseJson.reviewDtos[i].rating).to.be.a(\"number\");\r",
							"    pm.expect(responseJson.reviewDtos[i].createOn).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.reviewDtos[i].regionName).to.be.a(\"string\");;\r",
							"    pm.expect(responseJson.reviewDtos[i].cityName).to.be.a(\"string\");\r",
							"    \r",
							"\r",
							"    tests[\"reviewDtos instance size should be 6\"] = Object.keys(responseJson.reviewDtos[i]).length==6;\r",
							"\r",
							"    var paramCityName = pm.environment.get(\"cityName\").toUpperCase();\r",
							"    pm.expect(paramCityName).to.eq(responseJson.reviewDtos[i].cityName,\"bu ne la gardaş\");\r",
							"}\r",
							"});\r",
							"   pm.test(\"starDtos are only include numbers\", () => {\r",
							"   var starDtos = responseJson.starDtos.length;\r",
							"   var averagePointTotal = 0;\r",
							"for (let i = 0; i < starDtos; i++) {\r",
							"    pm.expect(responseJson.starDtos[i].point).to.be.a(\"number\");\r",
							"    pm.expect(responseJson.starDtos[i].percent).to.be.a(\"number\");;\r",
							"    pm.expect(responseJson.starDtos[i].count).to.be.a(\"number\");\r",
							"    var percent =100-((responseJson.paginationResponse.totalItemsCount - responseJson.starDtos[i].count)/responseJson.paginationResponse.totalItemsCount)*100;\r",
							"    averagePointTotal = averagePointTotal + responseJson.starDtos[i].point*responseJson.starDtos[i].count;\r",
							"    \r",
							"    tests[\"Percent Check\"]= pm.expect(Math.round(percent)).to.eq(responseJson.starDtos[i].percent);\r",
							"    tests[\"starDtos instance size should be 3\"] = Object.keys(responseJson.starDtos[i]).length==3;\r",
							"\r",
							"}\r",
							"\r",
							"    console.log(checkRatingAverage(averagePointTotal/responseJson.paginationResponse.totalItemsCount))\r",
							"    tests[\"Average check\"] = pm.expect(checkRatingAverage(averagePointTotal/responseJson.paginationResponse.totalItemsCount)).to.eq(responseJson.averageRate);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Rating range test - Ratings should be in 0-10\", function () {\r",
							"    pm.expect(_.inRange(responseJson.reviewDtos[1].rating, 0, 11));\r",
							"});\r",
							"pm.environment.unset(\"cityName\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"cityName\", \"ankara\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}?cityName={{cityName}}",
					"host": [
						"{{baseURL}}"
					],
					"query": [
						{
							"key": "cityName",
							"value": "{{cityName}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "?cityName=ankara",
							"query": [
								{
									"key": "cityName",
									"value": "ankara"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"paginationResponse\": {\n    \"pageItemsCount\": 20,\n    \"totalItemsCount\": 25005,\n    \"totalPageCount\": 1251\n  },\n  \"totalCount\": 25005,\n  \"starDtos\": [\n    {\n      \"point\": 1,\n      \"percent\": 5,\n      \"count\": 1228\n    },\n    {\n      \"point\": 2,\n      \"percent\": 1,\n      \"count\": 362\n    },\n    {\n      \"point\": 3,\n      \"percent\": 2,\n      \"count\": 606\n    },\n    {\n      \"point\": 4,\n      \"percent\": 9,\n      \"count\": 2247\n    },\n    {\n      \"point\": 5,\n      \"percent\": 82,\n      \"count\": 20562\n    }\n  ],\n  \"averageRate\": 4.5,\n  \"averageAllReviewsRate\": 4.5,\n  \"reviewDtos\": [\n    {\n      \"name\": \"Name Surname\",\n      \"comment\": \"10 luk hizmet \",\n      \"rating\": 10,\n      \"createOn\": \"2021-12-16T08:36:02.101Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"ANKARA\"\n    },\n    {\n      \"name\": \"Name Surname 2\",\n      \"comment\": \"Kaliteli Kargo\",\n      \"rating\": 10,\n      \"createOn\": \"2021-12-16T08:31:53.078Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"ANKARA\"\n    },\n    {\n      \"name\": \"Name Surname 3\",\n      \"comment\": \"Hızlı kargo ve sürpriz için teşekkürler\",\n      \"rating\": 10,\n      \"createOn\": \"2021-12-16T07:49:34.927Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"ANKARA\"\n    },\n    {\n      \"name\": \"Name Surname 4\",\n      \"comment\": \"Eşime aldım, gönderilmedi\",\n      \"rating\": 0,\n      \"createOn\": \"2021-12-16T07:08:19.8Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"HATAY\"\n    }\n  ]\n}"
				}
			]
		},
		{
			"name": "cityName_istanbul",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = JSON.parse(responseBody);\r",
							"\r",
							"function checkRatingAverage(num)\r",
							"{if (num<=0.5 && num >= 0){\r",
							"    return 0;\r",
							"} if(num<1 && num >= 0.5){\r",
							"    return 0.5;\r",
							"}if(num<1.5 && num >= 1){\r",
							"    return 1;\r",
							"}if(num<2 && num >= 1.5){\r",
							"    return 1.5;\r",
							"}if(num<2.5 && num >= 2){\r",
							"    return 2;\r",
							"}if(num<3 && num >= 2.5){\r",
							"    return 2.5;\r",
							"}if(num<3.5 && num >= 3){\r",
							"    return 3;\r",
							"}if(num<4 && num >= 3.5){\r",
							"    return 3.5;\r",
							"}if(num<4.5 && num >= 4){\r",
							"    return 4;\r",
							"}if(num<5 && num >= 4.5){\r",
							"    return 4.5;\r",
							"}if(5<=num){\r",
							"    return 5;\r",
							"}else{\r",
							"    console.log(\"Hatalı Rating Girildi!\")\r",
							"}}\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"   var reviewcount = responseJson.reviewDtos.length;\r",
							"for (let i = 0; i < reviewcount; i++) {\r",
							"    pm.expect(responseJson.reviewDtos[i].name).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.reviewDtos[i].comment).to.be.a(\"string\");;\r",
							"    pm.expect(responseJson.reviewDtos[i].rating).to.be.a(\"number\");\r",
							"    pm.expect(responseJson.reviewDtos[i].createOn).to.be.a(\"string\");\r",
							"    pm.expect(responseJson.reviewDtos[i].regionName).to.be.a(\"string\");;\r",
							"    pm.expect(responseJson.reviewDtos[i].cityName).to.be.a(\"string\");\r",
							"    \r",
							"\r",
							"    tests[\"reviewDtos instance size should be 6\"] = Object.keys(responseJson.reviewDtos[i]).length==6;\r",
							"\r",
							"    var paramCityName = pm.environment.get(\"cityName\").toUpperCase();\r",
							"    pm.expect(paramCityName).to.eq(responseJson.reviewDtos[i].cityName,\"bu ne la gardaş\");\r",
							"}\r",
							"});\r",
							"   pm.test(\"starDtos are only include numbers\", () => {\r",
							"   var starDtos = responseJson.starDtos.length;\r",
							"   var averagePointTotal = 0;\r",
							"for (let i = 0; i < starDtos; i++) {\r",
							"    pm.expect(responseJson.starDtos[i].point).to.be.a(\"number\");\r",
							"    pm.expect(responseJson.starDtos[i].percent).to.be.a(\"number\");;\r",
							"    pm.expect(responseJson.starDtos[i].count).to.be.a(\"number\");\r",
							"    var percent =100-((responseJson.paginationResponse.totalItemsCount - responseJson.starDtos[i].count)/responseJson.paginationResponse.totalItemsCount)*100;\r",
							"    averagePointTotal = averagePointTotal + responseJson.starDtos[i].point*responseJson.starDtos[i].count;\r",
							"    \r",
							"    tests[\"Percent Check\"]= pm.expect(Math.round(percent)).to.eq(responseJson.starDtos[i].percent);\r",
							"    tests[\"starDtos instance size should be 3\"] = Object.keys(responseJson.starDtos[i]).length==3;\r",
							"\r",
							"}\r",
							"\r",
							"    console.log(checkRatingAverage(averagePointTotal/responseJson.paginationResponse.totalItemsCount))\r",
							"    tests[\"Average check\"] = pm.expect(checkRatingAverage(averagePointTotal/responseJson.paginationResponse.totalItemsCount)).to.eq(responseJson.averageRate);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Rating range test - Ratings should be in 0-10\", function () {\r",
							"    pm.expect(_.inRange(responseJson.reviewDtos[1].rating, 0, 11));\r",
							"});\r",
							"pm.environment.unset(\"cityName\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"cityName\", \"istanbul\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}?cityName={{cityName}}",
					"host": [
						"{{baseURL}}"
					],
					"query": [
						{
							"key": "cityName",
							"value": "{{cityName}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "?cityName=istanbul",
							"query": [
								{
									"key": "cityName",
									"value": "istanbul"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"paginationResponse\": {\n    \"pageItemsCount\": 20,\n    \"totalItemsCount\": 25005,\n    \"totalPageCount\": 1251\n  },\n  \"totalCount\": 25005,\n  \"starDtos\": [\n    {\n      \"point\": 1,\n      \"percent\": 5,\n      \"count\": 1228\n    },\n    {\n      \"point\": 2,\n      \"percent\": 1,\n      \"count\": 362\n    },\n    {\n      \"point\": 3,\n      \"percent\": 2,\n      \"count\": 606\n    },\n    {\n      \"point\": 4,\n      \"percent\": 9,\n      \"count\": 2247\n    },\n    {\n      \"point\": 5,\n      \"percent\": 82,\n      \"count\": 20562\n    }\n  ],\n  \"averageRate\": 4.5,\n  \"averageAllReviewsRate\": 4.5,\n  \"reviewDtos\": [\n    {\n      \"name\": \"Name Surname\",\n      \"comment\": \"10 luk hizmet \",\n      \"rating\": 10,\n      \"createOn\": \"2021-12-16T08:36:02.101Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"ISTANBUL\"\n    },\n    {\n      \"name\": \"Name Surname 2\",\n      \"comment\": \"Kaliteli Kargo\",\n      \"rating\": 10,\n      \"createOn\": \"2021-12-16T08:31:53.078Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"ISTANBUL\"\n    },\n    {\n      \"name\": \"Name Surname 3\",\n      \"comment\": \"Hızlı kargo ve sürpriz için teşekkürler\",\n      \"rating\": 10,\n      \"createOn\": \"2021-12-16T07:49:34.927Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"ISTANBUL\"\n    },\n    {\n      \"name\": \"Name Surname 4\",\n      \"comment\": \"Eşime aldım, gönderilmedi\",\n      \"rating\": 0,\n      \"createOn\": \"2021-12-16T07:08:19.8Z\",\n      \"regionName\": \"\",\n      \"cityName\": \"ISTANBUL\"\n    }\n  ]\n}"
				}
			]
		},
		{
			"name": "cityName_van",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Message value check\", function () {\r",
							"    pm.expect(responseJson.message).to.eql('Not Found');\r",
							"});\r",
							"    \r",
							"pm.test(\"Object is contained\", () => {\r",
							"  const expectedObject = {\r",
							"  \r",
							"\"message\": \"Not Found\"\r",
							"\r",
							"\r",
							"  };\r",
							"  pm.expect(responseJson).to.deep.include(expectedObject);\r",
							"});\r",
							"   pm.test(\"Message should be string\", () => {\r",
							"    \r",
							"    pm.expect(responseJson.message).to.be.a(\"string\");;\r",
							"\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.environment.unset(\"cityName\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"cityName\", \"van\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}?cityName={{cityName}}",
					"host": [
						"{{baseURL}}"
					],
					"query": [
						{
							"key": "cityName",
							"value": "{{cityName}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "?cityName=van",
							"query": [
								{
									"key": "cityName",
									"value": "van"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"message\": \"Not Found\"\n}"
				}
			]
		},
		{
			"name": "cityName is null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(responseJson.cityName).to.include(\"'cityName' can not be null.\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Object is contained\", () => {\r",
							"  const expectedObject = {\r",
							"  \"cityName\": [\r",
							"    \"'cityName' can not be null.\"\r",
							"]\r",
							"  };\r",
							"  pm.expect(responseJson).to.deep.include(expectedObject);\r",
							"});\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}?cityName=",
					"host": [
						"{{baseURL}}"
					],
					"query": [
						{
							"key": "cityName",
							"value": ""
						}
					]
				}
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "?cityName=",
							"query": [
								{
									"key": "cityName",
									"value": ""
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"cityName\": [\n    \"'cityName' can not be null.\"\n  ]\n}"
				}
			]
		}
	],
	"variable": [
		{
			"key": "cityName",
			"value": "istanbul"
		}
	]
}